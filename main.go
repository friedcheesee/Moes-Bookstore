package main

import (
	//"fmt"
	"database/sql"
	"log"
	"net/http"
	"os"

	"github.com/go-chi/chi"
	"github.com/gorilla/sessions"
	"github.com/joho/godotenv"
	_ "github.com/lib/pq"
)

func loadEnv() {
	if err := godotenv.Load(); err != nil {
		log.Fatalf("Error loading .env file: %v", err)
	}
}

// initialising single database connection to use throughout the program
var db *sql.DB
var logFile *os.File

// initialising cookie store, to allow multiple users to be connected to the database
var store *sessions.CookieStore

func main() {
	loadEnv()         //load variables from env to login to db
	initCookieStore() //initialise cookie store

	//initialising log file
	logFile = initiatelog()
	defer logFile.Close()

	//connecting to database
	db = adminconnect()
	defer db.Close()

	//using chi router to handle requests
	r := chi.NewRouter()
	r.Post("/login", checkActiveAccount(loginHandler)) //if account isnt deleted, lets you login
	r.Post("/reguser", registerUserHandler)
	//user is a 'subrouter'- every request to /user will undergo the authenticate middleware
	r.Route("/user", func(r chi.Router) {
		r.Use(authenticate)
		r.Get("/search", searchBooksHandler)
		r.Post("/cart/add", addToCartHandler)
		r.Post("/cart/delete", deleteFromCartHandler)
		r.Post("/cart/buy", buyBooksHandler)
		r.Post("/cart/view", viewCartHandler)
		r.Post("/inventory", viewOwnedBooksHandler)
		r.Post("/review", giveReviewHandler)
		r.Post("/delete", deactivateHandler)
		r.Post("/logout", logoutHandler)
	})

	//admin is a 'subrouter'- every request to /admin will undergo the isAdmin middleware
	r.Route("/admin", func(r chi.Router) {
		r.Use(isAdmin)
		r.Post("/add", addBookHandler)
		r.Post("/delete", removeBookHandler)
		r.Post("/view", viewUsersHandler)
		r.Post("/view/books", viewAvailableBooksHandler)
	})
	http.ListenAndServe("localhost:8080", r)
}

// to log events
func logEvent(message string) {
	// Log the message
	log.Println(message)
}

// logs errors
func CheckError(err error) { // to log errors where ever necessary
	if err != nil {
		log.Println("Error:", err)
		//panic(err)
	}
}

// opens the log file
func initiatelog() *os.File {
	logFile, err := os.OpenFile("error.log", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666) //create a log file, if already exists, appends to the file.
	if err != nil {
		log.Fatalln("Failed to open error log file:", err)
	}
	log.SetOutput(logFile)
	return logFile
}

// creates session store variable for cookies with a random key
func initCookieStore() *sessions.CookieStore {
	cookieKey := os.Getenv("COOKIE_KEY")
	// Create the CookieStore
	store = sessions.NewCookieStore([]byte(cookieKey)) // contains random key generated by "crypto/rand" ,"encoding/hex"
	return store
}
